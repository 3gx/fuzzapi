// Parsing grammar/code for the user's program abstraction.
use api;
use ast;
use typ::{Native, Type};
use opcode;

grammar;

pub LProgram : api::Program = {
	<decls: LDeclarations> <stmts: LStmt*> => {
		api::Program::new(&decls, &stmts)
	},
};

LInclude: ast::Include = {
  "#include" "\"" <inc: LIdentifier> "\"" => {
    ast::Include::Local(inc)
  },
  "#include" "<" <inc: LIdentifier> ">" => {
    ast::Include::System(inc)
  },
};

pub LDeclarations : Vec<api::Declaration> = {
	<decllist: LUDTDecl*> <varlist: LVarDecl*> <funclist: LFunc*> => {
		let mut rv: Vec<api::Declaration> = Vec::new();
		for decl in decllist {
			rv.push(api::Declaration::UDT(decl));
		}
		for var in varlist {
			rv.push(var);
		}
		for fqn in funclist {
			rv.push(api::Declaration::Function(fqn));
		}
		rv
	},
};

LUDTDecl: api::DeclType = {
	"struct" <nm: LIdentifier> "{" <fields: LField*> "}" => {
		api::DeclType::Struct(nm, fields)
	},
	"enum" <nm: LIdentifier> "{" <constant: LConstant+> "}" => {
		api::DeclType::Enum(nm, constant)
	},
};

LIdentifier: String = {
	<nm: r"[A-Za-z][A-Za-z0-9_]*"> => nm.to_string(),
};
LNum: api::Expr = {
	<num: r"-?[0-9]+"> => api::Expr::IConst(num.to_string()),
	<num: r"-?[0-9]+\.[0-9]+"> => api::Expr::FConst(num.to_string()),
};

LField: api::UDTDecl = {
	"pointer" <blt: LSimpleType> <name: LIdentifier> ";" => {
		let ptr = Type::Pointer(Box::new(Type::Builtin(blt)));
		api::UDTDecl{name: name, ty: api::DeclType::Basic(ptr)}
	},
	<blt: LSimpleType> <name: LIdentifier> ";" => {
		api::UDTDecl{name: name,
		             ty: api::DeclType::Basic(Type::Builtin(blt))}
	},
	"struct" <ty: LIdentifier> <name: LIdentifier> ";" => {
		let udt = api::DeclType::StructRef(name);
		api::UDTDecl{name: ty, ty: udt}
	},
	"enum" <ty: LIdentifier> <name: LIdentifier> ";" => {
		api::UDTDecl{name: ty, ty: api::DeclType::EnumRef(name)}
	}
};

LSimpleType: Native = {
	"u8" => Native::U8, "u16" => Native::U16,
	"u32" => Native::U32, "u64" => Native::U64,
	"usize" => Native::Usize,
	"i8" => Native::I8, "i16" => Native::I16,
	"i32" => Native::I32, "i64" => Native::I64,
	"int" => Native::Integer,
	"void" => Native::Void,
	"char" => Native::Character,
};

LConstant: ::typ::EnumValue = {
	<nm: LIdentifier> "=" <ival: r"-?[0-9]+"> "," => {
		// Ideally we would not allow identifier to have digits, as LIdentifier
		// does, but we cannot due to LALRPOP bug 193.
		let v = match ival.parse::<i64>() {
			Err(e) => panic!("error parsing '{}' as an i64."),
			Ok(x) => x,
		};
		(nm, v)
	}
};

LVarDecl: api::Declaration = {
	"var:free" <id: LIdentifier> "gen:std:" <gen: LIdentifier>
	<typename: LTypeRef> => {
		api::Declaration::Free(
			api::FreeVarDecl{name: id, genname: "std:".to_string() + &gen,
			                 ty: typename}
		)
	},
	"var:free" <id: LIdentifier> "gen:" <gen: LIdentifier>
	<typename: LTypeRef> => {
		api::Declaration::Free(api::FreeVarDecl{name: id, genname: gen,
		                                        ty: typename})
	},
	"var:constrained" <id: LIdentifier> <typeref: LTypeRef> => {
		api::Declaration::Constrained(id, typeref)
	},
};

LScalarOperation: opcode::UOp = {
	"op:null" => opcode::UOp::None,
	"op:*" => opcode::UOp::Deref,
	"op:deref" => opcode::UOp::Deref,
	"op:&" => opcode::UOp::AddressOf,
	"op:addressof" => opcode::UOp::AddressOf,
	"&" => opcode::UOp::AddressOf,
};

LFunc: api::FuncDecl = {
	"function:decl" <nm: LIdentifier> <rtype: LTypeRef> "{" <arg: LArgTy*> "}"
		=> {
		api::FuncDecl{name: nm, retval: rtype, parameters: arg}
	},
};

LArgTy: api::DeclType = {
	<tyname: LTypeRef> "," => {
		tyname
	},
};

LBinOp: opcode::BinOp = {
	"+" => opcode::BinOp::Add,
	"-" => opcode::BinOp::Sub,
	"*" => opcode::BinOp::Mul,
	"/" => opcode::BinOp::Div,
	"%" => opcode::BinOp::Mod,
	"&&" => opcode::BinOp::LAnd,
	"||" => opcode::BinOp::LOr,
	">" => opcode::BinOp::Greater,
	"<" => opcode::BinOp::Less,
};

LAddSub: opcode::BinOp = {
	"+" => opcode::BinOp::Add,
	"-" => opcode::BinOp::Sub,
};
LMulDiv: opcode::BinOp = {
	"*" => opcode::BinOp::Mul,
	"/" => opcode::BinOp::Div,
	"%" => opcode::BinOp::Mod,
};
LLogical: opcode::BinOp = {
	"&&" => opcode::BinOp::LAnd,
	"||" => opcode::BinOp::LOr,
};
// We should technically separate out Eq/Ne because they should have lower
// precedence than other relational ops.  But for now ...
LRelational: opcode::BinOp = {
	">" => opcode::BinOp::Greater,
	"<" => opcode::BinOp::Less,
	"==" => opcode::BinOp::Equal,
	"!=" => opcode::BinOp::NotEqual,
};

LTypeRef: api::DeclType = {
	<builtin: LSimpleType> => {
		let ty = Type::Builtin(builtin);
		api::DeclType::Basic(ty)
	},
	"struct" <sref: LIdentifier> => api::DeclType::StructRef(sref),
	"enum" <eref: LIdentifier> => api::DeclType::EnumRef(eref),
	"pointer" <subtype: LTypeRef> => {
		let sty = match subtype {
			api::DeclType::Basic(ty) => ty,
			api::DeclType::StructRef(nm) => Type::Struct(nm, vec![]), // fake struct.
			api::DeclType::EnumRef(nm) => Type::Enum(nm, vec![]), // fake enum.
			_ => panic!("invalid LTypeRef {:?}", subtype),
		};
		let ty = Type::Pointer(Box::new(sty));
		api::DeclType::Basic(ty)
	},
};

LStmt: api::Stmt = {
	<expr: LExpr> => api::Stmt::Basic(expr),
	<lhs: LExpr> "=" <rhs: LExpr> => {
		api::Stmt::Assignment(lhs, rhs)
	},
	"verify:new" <expr: LExpr> => {
		api::Stmt::Verify(expr)
	},
	"constraint:new" <expr: LExpr> => {
		// add parentheses for the expr ?
		api::Stmt::Constraint(expr)
	},
	"if" "(" <expr: LExpr> ")" "{" <stlist: LStmt*> "}" => {
		api::Stmt::If(expr, Box::new(stlist))
	},
	"while" "(" <expr: LExpr> ")" "{" <stlist: LStmt*> "}" => {
		api::Stmt::While(expr, Box::new(stlist))
	},
};

LExpr: api::Expr = {
	<ll: LLogicalTerm> => ll,
};

LLogicalTerm: api::Expr = {
	<lhs: LLogicalTerm> <bop: LLogical> <rhs: LRelationalTerm> => {
		api::Expr::Compound(Box::new(lhs), bop, Box::new(rhs))
	},
	<lrt: LRelationalTerm> => lrt,
};

LRelationalTerm: api::Expr = {
	<lhs: LRelationalTerm> <bop: LRelational> <rhs: LASTerm> => {
		api::Expr::Compound(Box::new(lhs), bop, Box::new(rhs))
	},
	<astm: LASTerm> => astm,
};

LASTerm: api::Expr = {
	<lhs: LASTerm> <bop: LAddSub> <rhs: LMDTerm> => {
		api::Expr::Compound(Box::new(lhs), bop, Box::new(rhs))
	},
	<term: LMDTerm> => term,
};

LMDTerm: api::Expr = {
	<lhs: LMDTerm> <bop: LMulDiv> <rhs: LTerm> => {
		api::Expr::Compound(Box::new(lhs), bop, Box::new(rhs))
	},
	<term: LTerm> => term,
};

LTerm: api::Expr = {
	<sop: LScalarOperation> <id: LIdentifier> => {
		api::Expr::VarRef(sop, id)
	},
	<id: LIdentifier> => {
		let sop = opcode::UOp::None;
		api::Expr::VarRef(sop, id)
	},
	"function:call" <id: LIdentifier> "{" <args: LExpr*> "}" => {
		let mut arglist: Box<Vec<api::Expr>> = Default::default();
		for a in args.iter() {
			arglist.push(a.clone());
		}
		api::Expr::Call(id, arglist)
	},
	<cnst: LNum> => cnst,
	<fldexpr: LFieldExpr> => fldexpr,
};

LFieldExpr: api::Expr = {
	<object: LIdentifier> "." <field: LIdentifier> => {
		api::Expr::Field(object, field)
	},
};
