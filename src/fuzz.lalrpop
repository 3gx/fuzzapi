// Parsing grammar/code for the user's program abstraction.
use api;
use typ::{Native, Type};
use variable;

grammar;

pub L_API : Vec<api::Declaration> = {
	<decllist: LUDTDecl*> <fvarlist: LFreeVar*> <funclist: LFunc*> => {
		// todo fixme: garbage, this should be more than a list of declarations,
		// abstract code should follow
		let mut rv: Vec<api::Declaration> = Vec::new();
		for decl in decllist {
			rv.push(api::Declaration::UDT(decl));
		}
		for fvar in fvarlist {
			rv.push(api::Declaration::Free(fvar));
		}
		rv
	},
};

LUDTDecl: api::UDTDecl = {
	"struct" <nm: LIdentifier> "{" <fields: LField*> "}" => {
		let udt = api::DeclType::Struct(fields);
		api::UDTDecl{name: nm, ty: udt}
	},
	"enum" <nm: LIdentifier> "{" <constant: LConstant+> "}" => {
		api::UDTDecl{name: nm, ty: api::DeclType::Enum(constant)}
	},
};

LIdentifier: String = {
	<nm: r"[[:alpha:]]+([[:alnum:]]|_)*"> => nm.to_string(),
};

LField: api::UDTDecl = {
	"pointer" <blt: LSimpleType> <name: LIdentifier> ";" => {
		let ptr = Type::Pointer(Box::new(Type::Builtin(blt)));
		api::UDTDecl{name: name, ty: api::DeclType::Basic(ptr)}
	},
	<blt: LSimpleType> <name: LIdentifier> ";" => {
		api::UDTDecl{name: name,
		             ty: api::DeclType::Basic(Type::Builtin(blt))}
	},
	"struct" <ty: LIdentifier> <name: LIdentifier> ";" => {
		let udt = api::DeclType::StructRef(name);
		api::UDTDecl{name: ty, ty: udt}
	},
	"enum" <ty: LIdentifier> <name: LIdentifier> ";" => {
		api::UDTDecl{name: ty, ty: api::DeclType::EnumRef(name)}
	}
};

LSimpleType: Native = {
	"u8" => Native::U8, "u16" => Native::U16,
	"u32" => Native::U32, "u64" => Native::U64,
	"usize" => Native::Usize,
	"i8" => Native::I8, "i16" => Native::I16,
	"i32" => Native::I32, "i64" => Native::I64,
	"int" => Native::Integer,
	"void" => Native::Void,
	"char" => Native::Character,
};

LConstant: ::typ::EnumValue = {
	<nm: LIdentifier> "=" <ival: r"-?[0-9]+"> "," => {
		// Ideally we would not allow identifier to have digits, as LIdentifier
		// does, but we cannot due to LALRPOP bug 193.
		let v = match ival.parse::<i64>() {
			Err(e) => panic!("error parsing '{}' as an i64."),
			Ok(x) => x,
		};
		(nm, v)
	}
};

LFreeVar: api::FreeVarDecl = {
	"var" ":" "free" <id: LIdentifier> <oper: LOperation> "gen" ":"
		<gen: LIdentifier> <ty: LSimpleType> => {
		let fauxtype = Type::Builtin(Native::Void);
		api::FreeVarDecl{name: id, op: oper, genname: gen,
		                 ty: api::DeclType::Basic(fauxtype)}
	}
};

LOperation: variable::ScalarOp = {
	"op:null" => variable::ScalarOp::Null,
	"op:*" => variable::ScalarOp::Deref,
	"op:deref" => variable::ScalarOp::Deref,
	"op:&" => variable::ScalarOp::AddressOf,
	"op:addressof" => variable::ScalarOp::AddressOf,
};

LFunc: () = {
	"function:new" <nm: LIdentifier> <rtype: LSimpleType> "{" <arg: LArgTy*> "}"
		=> {
		// todo / fixme: return an actual type that we can use.
/*
		use typ::Name;
		println!("{} {}({:?})", rtype.name(), nm, arg);
*/
	},
};

LArgTy: String = {
	<tyname: LTypeRef> "," => {
		tyname
	},
};

LTypeRef: String = {
	<builtin: LSimpleType> => { use typ::Name; builtin.name() },
	"struct" <sref: LIdentifier> => "struct ".to_string() + sref.as_str(),
	"enum" <eref: LIdentifier> => "enum ".to_string() + eref.as_str(),
	"pointer" <subtype: LTypeRef> => "pointer ".to_string() + subtype.as_str(),
};
