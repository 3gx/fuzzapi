// Parsing code for externally-defined generators.
use std::str::FromStr;
use opcode;
use typ::*;
use usergen;
use util;

grammar;

pub LGeneratorList: Vec<usergen::UserGen> = {
	<ugenlist: LGenerator+> => ugenlist,
};

LGenerator: usergen::UserGen = {
"generator" <nm: LGeneratorName> <tyname: LType> <stlist: LState+> => {
	let typ: Type = util::type_from_str(tyname.as_str());
	usergen::UserGen::new(typ, &nm, &stlist)
}
};

LGeneratorName: String = {
	<nm: r"std:[[:word:]]+"> => nm.to_string(),
	<nm: r"[[:alpha:]][[:word:]]+"> => { nm.to_string() },
};

LType: String = {
	// Can we do case-insensitive matching with LALRPop?
	"I8" => "I8".to_string(), "i8" => "i8".to_string(),
	"I16" => "I16".to_string(), "i16" => "i16".to_string(),
	"I32" => "I32".to_string(), "i32" => "i32".to_string(),
	"I64" => "I64".to_string(), "i64" => "i64".to_string(),
	"U8" => "U8".to_string(), "u8" => "u8".to_string(),
	"U16" => "U16".to_string(), "u16" => "u16".to_string(),
	"U32" => "U32".to_string(), "u32" => "u32".to_string(),
	"U64" => "U64".to_string(), "u64" => "u64".to_string(),
};

LState: usergen::Expression = {
	"state" <exp: LExpression> => exp
};

LExpression: usergen::Expression = {
	<lt: LType> ":" "constant" "(" <num: LNum> ")" => {
		if lt == "string" {
			let scnst = usergen::Constant::String(lt.to_string());
			return usergen::Expression::ConstExpr(scnst);
		}
		let typ = match util::type_from_str(lt.as_str()) {
			Type::Builtin(blt) => blt, _ => panic!("non-Native?"),
		};
		let cnsttype: usergen::Constant = match typ {
			Native::I8 | Native::I16 | Native::I32 | Native::I64 | Native::Integer =>
				usergen::Constant::Signed(num),
			Native::U8 | Native::U16 | Native::U32 | Native::U64 | Native::Usize |
			Native::Unsigned =>
				usergen::Constant::Unsigned(num as u64),
			_ => panic!("unhandled type '{:?}'", typ),
		};
		usergen::Expression::ConstExpr(cnsttype)
	},
	<lt: LType> ":" "min" "(" ")" =>
		usergen::Expression::MinExpr(util::type_from_str(lt.as_str())),
	<lt: LType> ":" "max" "(" ")" =>
		usergen::Expression::MaxExpr(util::type_from_str(lt.as_str())),
	<lt: LType> ":" "random" "(" <low: LExpression> "," <high: LExpression> ")" =>
		usergen::Expression::RandomExpr(util::type_from_str(lt.as_str()),
		                               Box::new(low), Box::new(high)),
	// Ugh.  LALRPop is broken in that it doesn't let us specify operator
	// precedence.
	// Instead we have to encode the precedence into the tree, which is possible
	// for simple things but *impossible* for our grammar, because we want actual
	// real recursion in our expression definition (... as any language would)
	// allow all of the above expressions as the RHS of all the following
	// expressions, and such recursion *requires* precedence specification.
	<left: LExpression> "+" <right: LFactor> =>
		usergen::Expression::Compound(Box::new(left), opcode::BinOp::Add,
		                             Box::new(right)),
	<left: LExpression> "-" <right: LFactor> =>
		usergen::Expression::Compound(Box::new(left), opcode::BinOp::Sub,
		                             Box::new(right)),
	<left: LExpression> "/" <right: LTerm> =>
		usergen::Expression::Compound(Box::new(left), opcode::BinOp::Div,
		                             Box::new(right)),
	<left: LExpression> "*" <right: LTerm> =>
		usergen::Expression::Compound(Box::new(left), opcode::BinOp::Mul,
		                             Box::new(right)),
	<left: LFactor> "%" <right: LTerm> =>
		usergen::Expression::Compound(Box::new(left), opcode::BinOp::Mod,
		                             Box::new(right)),
};

LFactor: usergen::Expression = {
	<lt: LTerm> => lt,
};

LTerm: usergen::Expression = {
	<lt: LType> ":" "constant" "(" <num: LNum> ")" => {
		if lt == "string" {
			panic!("Strings can't be part of compound expressions.");
		}
		let typ = match util::type_from_str(lt.as_str()) {
			Type::Builtin(nat) => nat, _ => panic!("expected native type"),
		};
		let cnsttype: usergen::Constant = match typ {
			Native::I8 | Native::I16 | Native::I32 | Native::I64 | Native::Integer =>
				usergen::Constant::Signed(num),
			Native::U8 | Native::U16 | Native::U32 | Native::U64 | Native::Usize |
			Native::Unsigned =>
				usergen::Constant::Unsigned(num as u64),
			_ => panic!("unhandled type '{:?}'", typ),
		};
		usergen::Expression::ConstExpr(cnsttype)
	},
};

LNum: i64 = <strtmp:r"-?[0-9]"+> => {
	// ... first convert the Vec<&str> into a String.
	use std::fmt::Write;
	let mut asstr: String = String::new();
	for ch in strtmp {
		write!(&mut asstr, "{}", ch).unwrap();
	}
	i64::from_str(&asstr).unwrap()
/*
Start: "generator"
Type: "I32" | "U32" | ...
Integer: [:digit:]+
State: "state:" Integer
Expression:
	| TypeConstant
	| TypeCall
TypeConstant: Type ":" "constant" "(" Integer ")"
TypeCall:
	| Type ":" MinExpr
	| Type ":" MaxExpr
	| Type ":" Random 
MinExpr: "min" "(" ")"
MaxExpr: "max" "(" ")"
Random: "random" "(" Expr "," Expr ")"
Expr:
	| SimpleExpr
	| CompoundExpr
SimpleExpr:
	| Integer
	| "\"" String "\""
CompoundExpr:
	| MinExpr
	| MaxExpr
	| Expr Operator Expr
Operator: '+' | '-' | '*' | '/' | '%'

		enum State {
			Start, Type, Integer,
		}
*/
};
